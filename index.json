[{"date":"13 April, 2024","subtitle":"语言背景GolangGoogle 为什么要创建 Go 计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多","tags":"go java","title":"Go vs Java 全方位对比","url":"/posts/govsjava/"},{"date":"13 April, 2024","subtitle":"Service Mesh 概述 Service Mesh 一词最早由开发 Linkerd 的 Buoyant 公司提出，并于 2016 年 9 月29 日第一次公开使用了这一术语。William Morgan，Buoyant CEO，对 Service","tags":"service mesh 微服务 proxyless","title":"一文带你全方位了解 Service Mesh 核心技术","url":"/posts/servicemesh-1/"},{"date":"5 December, 2023","subtitle":"1. 同城双活是什么同城双活是一种容灾架构的设计模式，主要用于提高系统的可用性和容错性。它通常涉及在同一个城市内建立两个数据中心（机房），这两个","tags":"同城双活 容灾架构 异地多活","title":"同城双活的必修课 - 落地经验与关键挑战解析","url":"/posts/same-city-2/"},{"date":"20 November, 2023","subtitle":"1. 挑战与变革在公司发展初期，业务发展和用户增长是首要关注的焦点。然而，随着业务规模不断扩大，用户数量逐渐攀升，应用稳定性的重要性也变得愈发凸","tags":"同城双活 容灾架构 异地多活","title":"探索容灾架构演进之路-从单点到异地多活","url":"/posts/same-city-1/"},{"date":"13 September, 2023","subtitle":"背景放火平台是公司内部研发的平台:遵循混沌工程理念通过故障注入模式对系统进行演练的实施平台，提供丰富的故障场景模拟，以可视化、自动化的方式实","tags":"jvm java 字节码","title":"JVM-SANDBOX导致目标服务JVM Metaspace OOM的调查始末","url":"/posts/jvm-sandbox-1/"},{"date":"7 September, 2023","subtitle":"介绍JVM 沙箱容器是一种 JVM 的非侵入式运行期 AOP 解决方案。通过 JVM-SANDBOX 可以在不重启，不侵入目标 jvm 的前提下对目标方法进行代码增强。 无侵入，类隔离，可插拔","tags":"jvm java 字节码","title":"透过JVM-SANDBOX源码,了解字节码增强技术","url":"/posts/jvm-sandbox/"},{"date":"4 September, 2023","subtitle":"引言在之前的文章中，我们详细介绍了 ChaosBlade 中 CPU 故障的实现原理。本文将重点介绍模拟磁盘故障的实际操作与具体实现，包括 Linux 命令（如 dd 和 fallocate","tags":"chaos 混沌工程 chaosblade mem","title":"强化服务韧性：ChaosBlade磁盘故障模拟的原理与应用","url":"/posts/chaosblade-mem/"},{"date":"18 August, 2023","subtitle":"引言在接下来的文章中会主要介绍 ChaosBlade 基础资源类的故障场景以及底层实现原理，目前 ChaosBlade 已支持的基础资源类故障场景如下： 介绍服务器的稳定性和性能优化对于","tags":"chaos 混沌工程 chaosblade cpu","title":"揭秘ChaosBlade CPU故障：实现CPU故障的黑科技","url":"/posts/chaosblade-cpu/"},{"date":"17 August, 2023","subtitle":"前言在上文中对 ChaosBlade 进行了整体介绍，其中主要分为 ChaosBlade Box 以及 ChaosBlade Tool 两大部分，ChaosBlade Box 提供了可视化的管理控制台。真正的故障注入能力是由 ChaosBlade Tool","tags":"chaos 混沌工程 chaosblade","title":"混沌工程之 ChaosBlade 故障注入百宝箱","url":"/posts/chaosblade-tool/"},{"date":"13 August, 2023","subtitle":"1. 什么是混沌工程 Chaos Engineering is the discipline of experimenting on a system in order to build confidence in the system’s capability to withstand turbulent conditions in production. -《混沌工程原理》http://principlesofch","tags":"chaos 混沌工程 chaosblade","title":"混沌工程之 ChaosBlade 利刃出鞘","url":"/posts/chaosblade-1/"},{"date":"12 August, 2023","subtitle":"1. 前文回顾在上文中介绍了流量控制的实现原理，流量控制本质是根据资源所属的流控规则以及滑动时间窗口统计结构，对流量统计与计算从而控制流量的行为","tags":"sentinel-go algorithm","title":"揭秘 Sentinel-Go [热点参数] 的实现原理","url":"/posts/sentinel-hotspot/"},{"date":"9 August, 2023","subtitle":"介绍一个流量治理组件通常拥有“限流”这个最基础的能力，实现限流其核心思想是通过统计一段时间内的请求数，然后根据预先设定的阈值判断是否应该进行","tags":"sentinel-go algorithm","title":"揭秘 Sentinel-Go 毫秒级统计数据结构的实现原理","url":"/posts/sentinel-data/"},{"date":"3 August, 2023","subtitle":"介绍Linux 命名空间**(Namespace)** Linux 命名空间是一种隔离机制，允许将全局系统资源划分为多个独立的、相互隔离的部分，使得在不同","tags":"linux namespace cgroups","title":"探索Linux命名空间和控制组：实现资源隔离与管理的双重利器","url":"/posts/linux_namespace_cgroup/"},{"date":"3 August, 2023","subtitle":"1. 介绍在上文中我们介绍了 Sentinel-Go 的基石【基于滑动时间窗口实现的统计数据结构】，Sentinel-Go利用底层的数据结构，在上层建筑了多种流量治理的","tags":"sentinel-go algorithm","title":"揭秘 Sentinel-Go [流量控制] 的实现原理","url":"/posts/sentinel-flow/"}]